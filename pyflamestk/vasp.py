import pyflamestk.base

class Poscar():
    def __init__(self, fname="POSCAR"):
        self.structure = pyflamestk.base.Structure()
        self.lattice_parameter = 0
        self.structure_comment = "" 
        self.symbol_natoms_dict = {}
        pass
    
    def load(self, fname_in):
        file = open(fname_in, 'r')
        self.structure_comment = file.readline().strip()
        self.structure.lattice_parameter = float(file.readline())

        # read h_matrix
        for i in range(3):
            h_row_strings = file.readline().strip().split()
            for j in range(3):
               self.structure.h_matrix[i][j] = float(h_row_strings[j])

        # read symbols and atoms per symbol
        symbol_list    = file.readline().strip().split()
        num_atoms_list = [int(i) for i in file.readline().strip().split()]
        self.symbol_natoms_dict = {}
        for i in range(len(symbol_list)):
            self.symbol_natoms_dict[symbol_list[i]] = num_atoms_list[i]
            
        # read in atoms
        coordinate_style = file.readline().strip()
        if(coordinate_style.upper() == "Direct".upper()):
            for symbol in self.symbol_natoms_dict.keys():
                n_atoms = self.symbol_natoms_dict[symbol]
                for i_atom in range(n_atoms):
                    position = file.readline().strip().split()
                    position = [float(position[0]),
                                float(position[1]),
                                float(position[2])]
                    self.structure.addAtom(symbol,position)
        else:
          print("pyflamtestk does not support coordinate_type:".format(coordinate_style))

    def write(self, fname_out):
      comment_string = "automatically generated by pyflamestk.vasp.Poscar()\n"
      str_poscar  = comment_string
      str_poscar += "{:10.6}\n".format(self.structure.lattice_parameter)
      for basis_vector in self.structure.h_matrix:
        str_poscar += "{:10.6f} {:10.6f} {:10.6f}\n".format(basis_vector[0],basis_vector[1],basis_vector[2])
      sym_list = self.structure.getSymbolList()
      str_atomlist = ""
      str_atomnum  = ""
      for atom in sym_list:
          nAtoms = self.structure.getNumberOfAtoms(atom)
          str_atomlist   += " " + atom
          str_atomnum    += " " + str(nAtoms)
      str_atomlist   += "\n"
      str_atomnum    += "\n"

      str_poscar += str_atomlist
      str_poscar += str_atomnum
      str_poscar += "Direct\n"

      for sym in sym_list:
        for atom in self.structure.atomList:
          if sym == atom.symbol:
             str_position = "{:10.6f} {:10.6f} {:10.6f}\n".format(atom.position[0],atom.position[1],atom.position[2])
             str_poscar += str_position
 
      f = open(fname_out, 'w')
      f.write(str_poscar)
      f.close()
